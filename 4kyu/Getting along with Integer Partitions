
/*
From wikipedia https://en.wikipedia.org/wiki/Partition_(number_theory)

In number theory and combinatorics, a partition of a positive integer n, also called an integer partition, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition.

For example, 4 can be partitioned in five distinct ways:

4, 3 + 1, 2 + 2, 2 + 1 + 1, 1 + 1 + 1 + 1.

We can write:

enum(4) -> [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]] and

enum(5) -> [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]].

The number of parts in a partition grows very fast. For n = 50 number of parts is 204226, for 80 it is 15,796,476 It would be too long to tests answers with arrays of such size. So our task is the following:

1 - n being given (n integer, 1 <= n <= 50) calculate enum(n) ie the partition of n. We will obtain something like that:
enum(n) -> [[n],[n-1,1],[n-2,2],...,[1,1,...,1]] (order of array and sub-arrays doesn't matter). This part is not tested.

2 - For each sub-array of enum(n) calculate its product. If n = 5 we'll obtain after removing duplicates and sorting:

prod(5) -> [1,2,3,4,5,6]

prod(8) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18]

If n = 40 prod(n) has a length of 2699 hence the tests will not verify such arrays. Instead our task number 3 is:

3 - return the range, the average and the median of prod(n) in the following form (example for n = 5):

"Range: 5 Average: 3.50 Median: 3.50"

Range is an integer, Average and Median are float numbers rounded to two decimal places (".2f" in some languages).
Notes:

Range : difference between the highest and lowest values.

Mean or Average : To calculate mean, add together all of the numbers in a set and then divide the sum by the total count of numbers.

Median : The median is the number separating the higher half of a data sample from the lower half. (https://en.wikipedia.org/wiki/Median)
Hints:

Try to optimize your program to avoid timing out.

Memoization can be helpful but it is not mandatory for being successful.
*/
import java.util.*;
import java.util.stream.Collectors;

public class IntPart {
  private static Map<Long, Set<List<Long>>> memory = new HashMap<>();
  
  public static String part(long n) {
        Set<List<Long>> partition = partition(n);
        List<Long> products = calculateSubArrayProduct(partition);

        Long min = products.stream().mapToLong(Long::longValue).min().orElse(0L);
        Long max = products.stream().mapToLong(Long::longValue).max().orElse(0L);
        long range = max - min;

        long sum = products.stream().mapToLong(Long::longValue).sum();
        double average = (double) sum / products.size();

        int half = products.size() / 2;
        double median;
        if (products.size() % 2 == 0) {
            median = (products.get(half - 1) + products.get(half)) / 2.0;
        } else {
            median = products.get(half);
        }

        return String.format("Range: %d Average: %.2f Median: %.2f", range, average, median);
    }

    public static Set<List<Long>> partition(long number) {
        Set<List<Long>> result = new HashSet<>();
        if (number == 0) {
            return result;
        }
        for (long i = 1; i <= number - i; i++) {
            Set<List<Long>> lists = memory.containsKey(number - i) ? getCopy(memory.get(number - i)) : partition(number - i);

            long finalI = i;
            lists.forEach(list -> {
                list.add(finalI);
                list.sort(Long::compareTo);
            });

            result.addAll(lists);
        }

        result.add(new ArrayList<>(Arrays.asList(number)));
        memory.put(number, getCopy(result));
        return result;
    }

    public static List<Long> calculateSubArrayProduct(Set<List<Long>> partition) {
        List<Long> result = new ArrayList<>();
        partition.forEach(list -> {
            long product = list.stream().mapToLong(Long::longValue).reduce(1, (a, b) -> a * b);
            result.add(product);
        });
        return result.stream().distinct().sorted().collect(Collectors.toList());
    }

    private static Set<List<Long>> getCopy(Set<List<Long>> lists) {
        Set<List<Long>> copy = new HashSet<>();
        lists.forEach(
                list -> {
                    List<Long> buf = new ArrayList<>(list);
                    copy.add(buf);
                }
        );
        return copy;
    }
}