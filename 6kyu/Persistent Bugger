/*
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example:

 persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4
                      // and 4 has only one digit
                 
 persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,
                       // 1*2*6 = 12, and finally 1*2 = 2
                  
 persistence(4) == 0 // because 4 is already a one-digit number

*/

import java.util.ArrayList;

class Persist {
	public static int persistence(long n) {
    int count = 0;
    long num = n;
    ArrayList<Integer> digits = breakDigits(num);
     
    while (num > 9){
      count++;
      num = 1;
      for (int d : digits){
        num *= d;
      }
      if (num > 9) digits = breakDigits(num);
    }
    
    return count;
	}
  
  public static ArrayList<Integer> breakDigits(long num){
    ArrayList<Integer> digits = new ArrayList<>();
    
    while (num > 0){
      digits.add((int)(num % 10));
      num /= 10;
    }
    
    return digits;
  }
}