/*
My friend John and I are members of the "Fat to Fit Club (FFC)". John is worried because each month a list with the weights of members is published and each month he is the last on the list which means he is the heaviest.

I am the one who establishes the list so I told him: "Don't worry any more, I will modify the order of the list". It was decided to attribute a "weight" to numbers. The weight of a number will be from now on the sum of its digits.

For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99.

Given a string with the weights of FFC members in normal order can you give this string ordered by "weights" of these numbers?
Example:

"56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes: 

"100 180 90 56 65 74 68 86 99"

When two numbers have the same "weight", let us class them as if they were strings (alphabetical ordering) and not numbers:

180 is before 90 since, having the same "weight" (9), it comes before as a string.

All numbers in the list are positive numbers and the list can be empty.
Notes

    it may happen that the input string have leading, trailing whitespaces and more than a unique whitespace between two consecutive numbers
    For C: The result is freed.
*/
import java.util.Hashtable;
import java.util.Arrays;
import java.util.LinkedList;

public class WeightSort {
	
	public static String orderWeight(String strng) {
    if(!strng.trim().contains(" ")) {return strng;}
    
    StringBuilder answer = new StringBuilder();
    String[] weights = strng.split(" ");
    long[] values = new long [weights.length];
    Hashtable<Long,LinkedList> strVal = new Hashtable();
    Arrays.sort(weights);
    
    for(int i = 0; i < weights.length; i++) {
      values[i] = Long.decode(weights[i]).longValue();
      int j = 1, weight = 0;
      while(values[i]/Math.pow(10,j) > 0) {
        weight += (values[i]%Math.pow(10,j))/Math.pow(10,j-1);
        values[i] -= values[i]%Math.pow(10,j);
        j++;
      }
      values[i] = weight;
      LinkedList<String> val = new LinkedList();
      if(strVal.containsKey(values[i])) {
        val = strVal.get(values[i]);
      }
      val.add(weights[i]);
      strVal.put(values[i],val);
    }
    Arrays.sort(values);
    for(int i = 0; i < values.length; i++) {
      if(strVal.containsKey(values[i])) {
        for(int h = 0; h < strVal.get(values[i]).size(); h++) {
          answer.append(strVal.get(values[i]).get(h));
          answer.append(" ");
        }
        strVal.remove(values[i]);
      }
    }
    return answer.toString().trim();
	}
}