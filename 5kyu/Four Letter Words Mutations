/*
Our Setup

Alice and Bob work in an office. When the workload is light and the boss isn't looking, they often play simple word games for fun. This is one of those days!
This Game

Today Alice and Bob are playing what they like to call Mutations, where they take turns trying to "think up" a new four-letter word (made up of four unique letters) that is identical to the prior word except for only one letter. They just keep on going until their memories fail out.
Their Words

Alice and Bob have memories of the same size, each able to recall 10 to 2000 different four-letter words. Memory words and initial game word are randomly taken from the same list of 4000 (unique, four-letter, lowercased) words, any of which may appear in both memories.

The expression to "think up" a new word means that for their turn, the player must submit as their response word the first valid, unused word that appears in their memory (by lowest array index), as their memories are ordered from the most "memorable" words to the least.
The Rules

    a valid response word must contain four unique letters
    1 letter is replaced while the other 3 stay in position
    it must be the lowest indexed valid word in that memory
    this word cannot have already been used during the game
    the final player to provide a valid word will win the game
    if 1st player fails 1st turn, 2nd can win with one word
    when both players fail the initial word, there is no winner

Your Task

To determine the winner!
Some Examples

alice = plat,rend,bear,soar,mare,pare,flap,neat,clan,pore

bob = boar,clap,farm,lend,near,peat,pure,more,plan,soap

    In the case of word = "send" and first = 0:

    Alice responds to send with rend
    Bob responds to rend with lend
    Alice has no valid response to lend
    Bob wins the game.

    In the case of word = "flip" and first = 1:

    Bob has no valid response to flip
    Alice responds to flip with flap
    Alice wins the game.

    In the case of word = "calm" and first = 1:

    Bob has no valid response to calm
    Alice has no valid response to calm
    Neither wins the game.

    In the case of word = "more" and first = 1:

    Bob has no valid response to more **
    Alice responds to more with mare
    Alice wins the game.

    In the case of word = "maze" and first = 0:

    Alice responds to maze with mare
    Bob responds to mare with more **
    Alice responds to more with pore
    Bob responds to pore with pure
    Alice responds to pure with pare
    Bob has no valid response to pare
    Alice wins the game.

** Note that in these last two cases, Bob cannot use mere because it has two e's.
Input

String[] alice;  //  array of words in Alice's memory (10 <= n <= 2000)
String[] bob;    //  array of words in Bob's memory (same size as alice)
String   word;   //  string of the initial challenge word
int      first;  //  integer of whom begins: 0 for Alice, 1 for Bob

Output

return  0  //  if Alice wins
return  1  //  if Bob wins
return -1  //  if both fail

Enjoy!

If interested, you may choose from one of the following kata to solve next:

    Is Sator Square?
    Playing With Toy Blocks ~ Can you build a 4x4 square?
    Crossword Puzzle! (2x2)


*/
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
   public static int mutations(String[] alice, String[] bob, String word, int first) {
        ArrayList<ArrayList<String>> wordLists = new ArrayList<>(
                Arrays.asList(onlyValidWords(alice), onlyValidWords(bob)));
     
        wordLists.get(0).remove(word);
        wordLists.get(1).remove(word);

        int turn = first;
        int winner = -1;

        String[] solutions = {null, null};
        boolean finished = false;
        do {
            int player = turn % 2;
            int otherPlayer = (turn+1) % 2;

            solutions[player] = findNextCandidate(wordLists.get(player), word);
            if (solutions[player] != null) {
                word = solutions[player];
                wordLists.get(player).remove(word);
                wordLists.get(otherPlayer).remove(word);
                winner = player;
                turn++;
            } else {
                if (solutions[otherPlayer] != null) {
                    finished = true;
                } else {
                    turn++;
                }
            }
            // no winner condition
            if (turn - first > 1 && winner == -1) {
                finished = true;
            }
            // one player has no matches at all condition
            if (turn - first > 1 &&
                    (solutions[player] == null ||solutions[otherPlayer] == null )) {
                finished = true;
            }
        } while (!finished);
        return winner;
    }

    public static String findNextCandidate(ArrayList<String> wordList, String word) {
        for (String candidate : wordList) {
            if (isOneLetterDifferent(candidate, word)) {
                return candidate;
            }
        }
        return null;
    }

    public static boolean isOneLetterDifferent(String candidate, String word) {
        int uniqueChars = 0;
        for (int i = 0; i < word.length(); i++) {
            if (word.charAt(i) != candidate.charAt(i)) {
                uniqueChars++;
            }
        }
        return uniqueChars == 1;
    }

    public static ArrayList<String> onlyValidWords(String[] list) {
        ArrayList<String> res = new ArrayList<>();
        for (String word : list) {
            if (isValidWord(word)) {
                res.add(word);
            }
        }
        return res;
    }

    public static boolean isValidWord(String word) {
        for (int i = 0; i < word.length() - 1; i++) {
            if (word.indexOf(word.charAt(i),i+1)!=-1) {
                return false;
            }
        }
        return true;
    }
}